
version 6.0

set nofixendofline

"enable mouse support
set mouse=a
set mousemodel=extend

set runtimepath+=/etc/vim,~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

runtime plugins.vim
runtime nerdtree.vim
runtime keybinds.vim
runtime completion.vim

augroup highlight_yank
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank { higroup='IncSearch', timeout=200 }
augroup END

if $COLORTERM == 'truecolor'
    set termguicolors
    " TODO find alternative for no truecolor also
    lua require'colorizer'.setup()
endif

" Set up python repl
let g:slime_python_ipython = 1
let g:slime_target = "neovim"

" Improve airline widgets truncation in smaller windows
let g:airline#extensions#default#section_truncate_width = {
  \ 'b': 75,
  \ 'x': 80,
  \ 'y': 200,
  \ 'z': 45,
  \ 'warning': 80,
  \ 'error': 80,
  \ }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" LaTeX live preview
let g:livepreview_previewer = 'okular'
"let g:livepreview_engine = 'pdflatex -shell-escape'

" python paths
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

" command prompt
let g:editcommand_prompt = ':'


lua << EOF
  require("which-key").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    window = {
      border = 'single',
      margin = { 0, 0, 0, 0},
      padding = { 0, 2, 0, 2 }
    }
  }
EOF

" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=~/.vimundo/


if has('nvim')
    augroup terminal_setup | au!
        " Make click on terminal pane enter terminal mode
        autocmd TermOpen * nnoremap <buffer><LeftRelease> <LeftRelease>i

        " Automatically enter terminal mode when switching to a terminal pane
        autocmd BufEnter,BufWinEnter,WinEnter,FocusGained,TermOpen term://* startinsert

        " Disable line numbers in terminal panes
        autocmd TermOpen term://* setlocal nonumber norelativenumber
    augroup end
endif

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" powerline fonts
let g:airline_powerline_fonts = 1

" Colorscheme
colorscheme base16-solarized-dark
let g:airline_theme = 'base16'

" Split settings
set splitbelow
set splitright

" folding settings
set foldmethod=indent   "fold based on indentation
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default

" Smartcase searching
set ignorecase
set smartcase

" X11 clipboard
if exists('$DISPLAY')
    set clipboard=unnamedplus
endif

" Open git edits in a vim split when running in :terminal
if has('nvim')
  let $GIT_EDITOR = 'nvr -cc split --remote-wait'
endif
autocmd FileType gitcommit,gitrebase,gitconfig set bufhidden=delete

" Line highlighting
set cpoptions+=$
set ruler
set cursorline

" Turn on line numbering
set relativenumber
set number

" Relative and absolute numbering autotoggle
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber

set ttimeoutlen=10
augroup FastEscape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0
    autocmd InsertLeave * set timeoutlen=1000
augroup END

" Highlight active pane background
hi ActiveWindow ctermbg=8 guibg=#002b36
hi InactiveWindow ctermbg=NONE guibg=#041f27
set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow
autocmd FocusGained * hi ActiveWindow ctermbg=8 guibg=#002b36
autocmd FocusLost * hi ActiveWindow ctermbg=NONE guibg=#041f27
autocmd FocusLost * set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow
autocmd FocusGained * set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow

" Restore tmux background color on exit
if exists('$TMUX')
    autocmd VimLeave * !tmux set window-active-style fg=default,bg="#002b36"
endif

" Automatically re-read file every second
set autoread
set updatetime=1000
autocmd CursorHold * call Timer()
function! Timer()
  call feedkeys("f\e")
  " K_IGNORE keycode does not work after version 7.2.025)
  " there are numerous other keysequences that you can use
  checktime
endfunction

" Syntax highlighting on
syntax on
filetype plugin indent on
set modeline

" TODO maybe change this to use some sort of ftplugin, maybe polyglot?
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" vim: set ft=vim :
