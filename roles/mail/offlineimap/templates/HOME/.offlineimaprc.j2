[general]
# List of accounts to be synced, separated by a comma.
accounts = {% for email in email_accounts %}{{ email.account_name }}{% if not loop.last %}, {% endif %}{% endfor %}

pythonfile = ~/.offlineimap/auth.py
# Controls how many accounts may be synced simultaneously
maxsyncaccounts = 1

{% for email in email_accounts %}

[Account {{ email.account_name }}]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = {{ email.account_name }}-local
# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = {{ email.account_name }}-remote
# Minutes between syncs
autorefresh = 0.5
# Quick-syncs do not update if the only changes were to IMAP flags.
# autorefresh=0.5 together with quick=10 yields
# 10 quick refreshes between each full refresh, with 0.5 minutes between every
# refresh, regardless of type.
quick = 10
postsynchook = ~/.offlineimap/notify-new.sh

[Repository {{ email.account_name }}-local]
# OfflineIMAP supports Maildir, GmailMaildir, and IMAP for local repositories.
type = Maildir
# Where should the mail be placed?
localfolders = ~/mail/{{ email.account_name }}
{% if email.provider == "gmail" %}
#nametrans= lambda f: '[Gmail]/' + f if f in ['Utkast', 'Stjernemerket', 'Viktig', 'S&APg-ppelpost', 'Papirkurv', 'All e-post', 'Sendt e-post'] else f
nametrans= lambda f: '[Gmail]/' + f if f in ['Drafts', 'Starred', 'Important', 'Spam', 'Trash', 'All Mail', 'Sent'] else f
{% endif %}
folderfilter = lambda folder: folder not in ['Trash', 'Sent Mail']

[Repository {{ email.account_name }}-remote]
type = IMAP
remoteuser = {{ email.address }}
{% if email.provider == "gmail" %}
remotehost = imap.gmail.com
remotepasseval = get_app_password("{{ email.address }}")
{% elif email.provider == "outlook" %}
remotehost = outlook.office365.com
auth_mechanisms = XOAUTH2
oauth2_request_url = https://login.microsoftonline.com/common/oauth2/v2.0/token
oauth2_client_id_eval = get_client_id("{{ email.address }}")
oauth2_client_secret_eval = get_client_secret("{{ email.address }}")
oauth2_refresh_token_eval = get_refresh_token("{{ email.address }}")
{% endif %}
sslcacertfile = /etc/ssl/certs/ca-certificates.crt

{% if email.provider == "gmail" %}
nametrans= lambda f: f.replace("[Gmail]/","")
{% elif email.provider == "outlook" %}
# Folders to skip during sync.
folderfilter = lambda foldername: foldername not in [
    'Calendar',
    'Calendar/Birthdays',
    'Calendar/Sub Folder 1',
    'Calendar/Sub Folder 2',
    'Calendar/United States holidays',
    'Contacts',
    'Contacts/Sub Folder 1',
    'Contacts/Sub Folder 2',
    'Contacts/Skype for Business Contacts',
    'Deleted Items',
    'Drafts',
    'Journal',
    'Junk Email',
    'Notes',
    'Outbox',
    'Social Activity Notifications'
    'Sync Issues',
    'Sync Issues/Conflicts',
    'Sync Issues/Local Failures',
    'Sync Issues/Server Failures',
    'Tasks',
    'Tasks/Sub Folder 1',
    'Tasks/Sub Folder 2',
    'Trash']


{% endif %}

# Instead of closing the connection once a sync is complete, offlineimap will
# send empty data to the server to hold the connection open. A value of 60
# attempts to hold the connection for a minute between syncs (both quick and
# autorefresh).This setting has no effect if autorefresh and holdconnectionopen
# are not both set.
keepalive = 60
# OfflineIMAP normally closes IMAP server connections between refreshes if
# the global option autorefresh is specified.  If you wish it to keep the
# connection open, set this to true. This setting has no effect if autorefresh
# is not set.
holdconnectionopen = yes

{% endfor %}
