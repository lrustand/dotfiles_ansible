#-quicklisp

;; -*- lisp -*-
(ql:quickload "stumpwm")

(in-package :stumpwm)
(setf *default-package* :stumpwm)
;;(ql:quickload "clx-truetype")
;;(load-module "ttf-fonts")

(setf *mouse-focus-policy* :click)
(setf *suppress-frame-indicator* T)
(setf *normal-border-width* 2)

(set-font "pango:DejaVu Sans Mono 10")

(defcommand alacritty () ()
  "start alacritty"
  (run-shell-command "alacritty"))

(defcommand rofi () ()
  "show rofi"
  (run-shell-command "rofi -show run"))

(define-key *top-map* (kbd "s-RET") "alacritty")
(define-key *top-map* (kbd "s-BackSpace") "delete")
(define-key *top-map* (kbd "H-BackSpace") "kill-windows-current-group")
(define-key *top-map* (kbd "s-c") "loadrc")
(define-key *top-map* (kbd "H-d") "rofi")

(define-key *top-map* (kbd "s-f") "fullscreen")

;; Move focus
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Right") "move-focus right")

;; Move window
(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-L") "move-window right")
(define-key *top-map* (kbd "s-S-Left") "move-window left")
(define-key *top-map* (kbd "s-S-Down") "move-window down")
(define-key *top-map* (kbd "s-S-Up") "move-window up")
(define-key *top-map* (kbd "s-S-Right") "move-window right")

;; Resize frame
(define-key *top-map* (kbd "s-C-h") "resize-direction left")
(define-key *top-map* (kbd "s-C-j") "resize-direction down")
(define-key *top-map* (kbd "s-C-k") "resize-direction up")
(define-key *top-map* (kbd "s-C-l") "resize-direction right")
(define-key *top-map* (kbd "s-C-Left") "resize-direction left")
(define-key *top-map* (kbd "s-C-Down") "resize-direction down")
(define-key *top-map* (kbd "s-C-Up") "resize-direction up")
(define-key *top-map* (kbd "s-C-Right") "resize-direction right")
(define-key *top-map* (kbd "s-C-e") "balance-frames")

;; Change workspace
(define-key *top-map* (kbd "s-q") "gselect 1")
(define-key *top-map* (kbd "s-w") "gselect 2")
(define-key *top-map* (kbd "s-e") "gselect 3")
(define-key *top-map* (kbd "s-r") "gselect 4")
(define-key *top-map* (kbd "s-t") "gselect 5")
(define-key *top-map* (kbd "s-y") "gselect 6")
(define-key *top-map* (kbd "s-u") "gselect 7")
(define-key *top-map* (kbd "s-i") "gselect 8")
(define-key *top-map* (kbd "s-o") "gselect 9")
(define-key *top-map* (kbd "s-p") "gselect 10")

;; Move window to workspace
(define-key *top-map* (kbd "s-Q") "gmove-and-follow 1")
(define-key *top-map* (kbd "s-W") "gmove-and-follow 2")
(define-key *top-map* (kbd "s-E") "gmove-and-follow 3")
(define-key *top-map* (kbd "s-R") "gmove-and-follow 4")
(define-key *top-map* (kbd "s-T") "gmove-and-follow 5")
(define-key *top-map* (kbd "s-Y") "gmove-and-follow 6")
(define-key *top-map* (kbd "s-U") "gmove-and-follow 7")
(define-key *top-map* (kbd "s-I") "gmove-and-follow 8")
(define-key *top-map* (kbd "s-O") "gmove-and-follow 9")
(define-key *top-map* (kbd "s-P") "gmove-and-follow 10")

;; Change workspace/screen
(define-key *top-map* (kbd "H-h") "sprev")
(define-key *top-map* (kbd "H-j") "gnext")
(define-key *top-map* (kbd "H-k") "gprev")
(define-key *top-map* (kbd "H-l") "snext")
(define-key *top-map* (kbd "H-Left") "sprev")
(define-key *top-map* (kbd "H-Down") "gnext")
(define-key *top-map* (kbd "H-Up") "gprev")
(define-key *top-map* (kbd "H-Right") "snext")

;; Move window to workspace/screen
;; TODO fix screen with window commands
(define-key *top-map* (kbd "H-H") "sprev-with-window")
(define-key *top-map* (kbd "H-J") "gnext-with-window")
(define-key *top-map* (kbd "H-K") "gprev-with-window")
(define-key *top-map* (kbd "H-L") "snext-with-window")
(define-key *top-map* (kbd "H-S-Left") "sprev-with-window")
(define-key *top-map* (kbd "H-S-Down") "gnext-with-window")
(define-key *top-map* (kbd "H-S-Up") "gprev-with-window")
(define-key *top-map* (kbd "H-S-Right") "snext-with-window")

;; Show hidden windows
(define-key *top-map* (kbd "s-g") "pull-from-windowlist")
(define-key *top-map* (kbd "s-n") "next-in-frame")
(define-key *top-map* (kbd "s-p") "prev-in-frame")
(define-key *top-map* (kbd "s-TAB") "other-in-frame")

;; Split frame
(define-key *top-map* (kbd "s-s") "vsplit")
(define-key *top-map* (kbd "s-S") "hsplit")


(defun show-battery-charge ()
  (let ((raw-battery (run-shell-command "acpi | cut -d, -f2" t)))
    (substitute #\Space #\Newline raw-battery)))

(defun show-battery-state ()
  (let ((raw-battery (run-shell-command "acpi | cut -d: -f2 | cut -d, -f1" t)))
    (substitute #\Space #\Newline raw-battery)))

(defvar *prev-user-cpu* 0)
(defvar *prev-sys-cpu* 0)
(defvar *prev-idle-cpu* 0)
(defvar *prev-iowait* 0)

(defun current-cpu-usage ()
  "Return the average CPU usage since the last call.
       First value is percent of CPU in use.
       Second value is percent of CPU in use by system processes.
       Third value is percent of time since last call spent waiting for IO (or 0 if not available)."
  (let ((cpu-result 0)
        (sys-result 0)
        (io-result nil))
    (with-open-file (in "/proc/stat" :direction :input)
      (if (eq 'cpu (read in))
          (let* ((norm-user (read in))
                 (nice-user (read in))
                 (user (+ norm-user nice-user))
                 (sys (read in))
                 (idle (read in))
                 (iowait (or (ignore-errors (read in)) 0))
                 (step-denom (- (+ user sys idle iowait)
                                (+ *prev-user-cpu* *prev-sys-cpu* *prev-idle-cpu* *prev-iowait*))))
            (setf cpu-result (/ (- (+ user sys)
                                   (+ *prev-user-cpu* *prev-sys-cpu*))
                                step-denom)
                  sys-result (/ (- sys *prev-sys-cpu*)
                                step-denom)
                  io-result (/ (- iowait *prev-iowait*)
                               step-denom)
                  *prev-user-cpu* user
                  *prev-sys-cpu* sys
                  *prev-idle-cpu* idle
                  *prev-iowait* iowait))
          (warn "Unexpected header")))
    (values cpu-result sys-result io-result)))

(defun format-current-cpu-usage (stream)
  "Formats a string representing the current processor usage to STREAM.
       Arguments are as those to FORMAT, so NIL returns a formatted string and T prints to standard
       output."
  (multiple-value-bind (cpu sys io) (current-cpu-usage)
    (declare (ignore sys))
    (format stream "[cpu:~3D%] [io:~3D%]" (truncate (* 100 cpu)) (if io (truncate (* 100 io)) 0))))


(setf *screen-mode-line-format*
  (list '(:eval (format-current-cpu-usage nil))))
